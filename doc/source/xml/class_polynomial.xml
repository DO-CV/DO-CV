<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="class_polynomial" kind="class" prot="public">
    <compoundname>Polynomial</compoundname>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_polynomial_1abea908840ca3639bce8d1475d04c56c8" prot="private" static="no" mutable="no">
        <type>std::vector&lt; Monomial&lt; T &gt; &gt;</type>
        <definition>std::vector&lt;Monomial&lt;T&gt; &gt; monomials_</definition>
        <argsstring></argsstring>
        <name>monomials_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="103" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" bodystart="103" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_polynomial_1a405c4c7564c79dd2c79d63e343cf28b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Polynomial</definition>
        <argsstring>()</argsstring>
        <name>Polynomial</name>
        <briefdescription>
<para>Constructors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="24" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1af9076ed88bd19399b9957335bbd1965a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Polynomial</definition>
        <argsstring>(const std::vector&lt; Monomial&lt; T &gt; &gt; &amp;monomials)</argsstring>
        <name>Polynomial</name>
        <param>
          <type>const std::vector&lt; Monomial&lt; T &gt; &gt; &amp;</type>
          <declname>monomials</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="26" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" bodystart="25" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1aae825918182883270c868e73fc2d3aa7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Polynomial</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;coeffs)</argsstring>
        <name>Polynomial</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>coeffs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="28" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" bodystart="27" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1a748315eb1bb724c6a749e65424eca570" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Polynomial</definition>
        <argsstring>(const Polynomial &amp;P)</argsstring>
        <name>Polynomial</name>
        <param>
          <type>const <ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="33" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1a4cec7dfc1c9109a098aacbbdf0595373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Polynomial</definition>
        <argsstring>(Polynomial &amp;&amp;p)</argsstring>
        <name>Polynomial</name>
        <param>
          <type><ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="34"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1a70c5b3d931267862a3149dd9932f2082" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; operator[]</definition>
        <argsstring>(int degree)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>degree</declname>
        </param>
        <briefdescription>
<para>Coefficient accessor at given degree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="36" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1a169b84ab2ede07c827406dc28ad69fb3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; operator[]</definition>
        <argsstring>(int degree) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>degree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="37" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1a05c1712842b4934ccb9f7ad59e47de72" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T operator()</definition>
        <argsstring>(const T &amp;x) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Evaluation operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="40" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" bodystart="39" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1aeb4b51945f967af25dbbc9c202c753a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Polynomial &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="48" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" bodystart="47" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1a6737b17459938018bc15196b2678c67a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Polynomial &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="57" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1a40b26ce4c7cd133a7429fef6a67a8dae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Monomial &amp;other) const </argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const Monomial &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="60"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1adcbcb5090d81ad0b0bb1252cad233597" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Monomial &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const Monomial &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="64"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1a1179ca4f006bfa220b371de1b6fb3922" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Monomial &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const Monomial &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="65"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1a349fd2f5f3296a57e503bf9f2f25bc55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
        <definition>Polynomial&amp; operator+=</definition>
        <argsstring>(const Polynomial &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Arithmetic operators. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="67"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1a56dea1c182be53c20a023d0491bd232c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
        <definition>Polynomial&amp; operator-=</definition>
        <argsstring>(const Polynomial &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="68"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1a3952b5f6fd4e4511308c25378410a681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
        <definition>Polynomial&amp; operator*=</definition>
        <argsstring>(const Polynomial &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="69"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1a3b7ee1c24bedeaacff61428cce342f33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
        <definition>Polynomial&amp; operator+=</definition>
        <argsstring>(const Monomial &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const Monomial &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="70"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1a0b484c95b3ca5e6e874cb2d987b784b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
        <definition>Polynomial&amp; operator-=</definition>
        <argsstring>(const Monomial &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const Monomial &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="71"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1a1aef36d03980615b0c30a4c978e7419c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
        <definition>Polynomial&amp; operator*=</definition>
        <argsstring>(const Monomial &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const Monomial &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="72"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1a3a5ddb803f57d378deb12006b8478272" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
        <definition>Polynomial&amp; operator*=</definition>
        <argsstring>(const T &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="73"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1aff3ec845aa755c299bd64f55069eae3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynomial" kindref="compound">Polynomial</ref></type>
        <definition>Polynomial operator+</definition>
        <argsstring>(const Polynomial &amp;other) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Arithmetic operators. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="75"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1a69f31cb6d94ba1555d10c66f3e8e6813" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynomial" kindref="compound">Polynomial</ref></type>
        <definition>Polynomial operator-</definition>
        <argsstring>(const Polynomial &amp;other) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="76"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1a49a7a9086233a1bb858063cd0418afd1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynomial" kindref="compound">Polynomial</ref></type>
        <definition>Polynomial operator*</definition>
        <argsstring>(const Polynomial &amp;other) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="78"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1a604c190c6e2f55d7f25fad1eba5cc2a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynomial" kindref="compound">Polynomial</ref></type>
        <definition>Polynomial operator+</definition>
        <argsstring>(const Monomial &amp;other) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const Monomial &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="79"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1ae63846228d8345242792b5fcf4f43053" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynomial" kindref="compound">Polynomial</ref></type>
        <definition>Polynomial operator-</definition>
        <argsstring>(const Monomial &amp;other) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const Monomial &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="80"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1a984489bdeaf31ff722e3e30706e5e8ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynomial" kindref="compound">Polynomial</ref></type>
        <definition>Polynomial operator*</definition>
        <argsstring>(const Monomial &amp;other) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const Monomial &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="81"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1aaa7272e74e2cf8b1e12b4eb0fe81d081" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_polynomial" kindref="compound">Polynomial</ref></type>
        <definition>Polynomial operator*</definition>
        <argsstring>(const T &amp;other) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="82"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1ab65ecef3becaa89428139a279bf58c61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator=</definition>
        <argsstring>(const Polynomial &amp;other) const </argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="84"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_polynomial_1af1fdf53b29100b084772816cb9ecc8ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Polynomial &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="87" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" bodystart="86" bodyend="96"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_polynomial_1a88747b60ebcd8f64198296e7f2f9342b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void copy</definition>
        <argsstring>(const Polynomial &amp;other)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="99" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" bodystart="98" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="class_polynomial_1abf377abb9603855135d46bf6b9efde5f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(const Polynomial &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type>const <ref refid="class_polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="101" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" bodystart="100" bodyend="101"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" line="21" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/Polynomial_draft.hpp" bodystart="20" bodyend="104"/>
    <listofallmembers>
      <member refid="class_polynomial_1a88747b60ebcd8f64198296e7f2f9342b" prot="private" virt="non-virtual"><scope>Polynomial</scope><name>copy</name></member>
      <member refid="class_polynomial_1abea908840ca3639bce8d1475d04c56c8" prot="private" virt="non-virtual"><scope>Polynomial</scope><name>monomials_</name></member>
      <member refid="class_polynomial_1a6737b17459938018bc15196b2678c67a" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator!=</name></member>
      <member refid="class_polynomial_1a1179ca4f006bfa220b371de1b6fb3922" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator!=</name></member>
      <member refid="class_polynomial_1a05c1712842b4934ccb9f7ad59e47de72" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator()</name></member>
      <member refid="class_polynomial_1a49a7a9086233a1bb858063cd0418afd1" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator*</name></member>
      <member refid="class_polynomial_1a984489bdeaf31ff722e3e30706e5e8ec" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator*</name></member>
      <member refid="class_polynomial_1aaa7272e74e2cf8b1e12b4eb0fe81d081" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator*</name></member>
      <member refid="class_polynomial_1a3952b5f6fd4e4511308c25378410a681" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator*=</name></member>
      <member refid="class_polynomial_1a1aef36d03980615b0c30a4c978e7419c" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator*=</name></member>
      <member refid="class_polynomial_1a3a5ddb803f57d378deb12006b8478272" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator*=</name></member>
      <member refid="class_polynomial_1aff3ec845aa755c299bd64f55069eae3c" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator+</name></member>
      <member refid="class_polynomial_1a604c190c6e2f55d7f25fad1eba5cc2a3" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator+</name></member>
      <member refid="class_polynomial_1a349fd2f5f3296a57e503bf9f2f25bc55" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator+=</name></member>
      <member refid="class_polynomial_1a3b7ee1c24bedeaacff61428cce342f33" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator+=</name></member>
      <member refid="class_polynomial_1a69f31cb6d94ba1555d10c66f3e8e6813" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator-</name></member>
      <member refid="class_polynomial_1ae63846228d8345242792b5fcf4f43053" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator-</name></member>
      <member refid="class_polynomial_1a56dea1c182be53c20a023d0491bd232c" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator-=</name></member>
      <member refid="class_polynomial_1a0b484c95b3ca5e6e874cb2d987b784b1" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator-=</name></member>
      <member refid="class_polynomial_1a40b26ce4c7cd133a7429fef6a67a8dae" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator&lt;</name></member>
      <member refid="class_polynomial_1af1fdf53b29100b084772816cb9ecc8ac" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_polynomial_1ab65ecef3becaa89428139a279bf58c61" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator=</name></member>
      <member refid="class_polynomial_1aeb4b51945f967af25dbbc9c202c753a6" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator==</name></member>
      <member refid="class_polynomial_1adcbcb5090d81ad0b0bb1252cad233597" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator==</name></member>
      <member refid="class_polynomial_1a70c5b3d931267862a3149dd9932f2082" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator[]</name></member>
      <member refid="class_polynomial_1a169b84ab2ede07c827406dc28ad69fb3" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>operator[]</name></member>
      <member refid="class_polynomial_1a405c4c7564c79dd2c79d63e343cf28b6" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>Polynomial</name></member>
      <member refid="class_polynomial_1af9076ed88bd19399b9957335bbd1965a" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>Polynomial</name></member>
      <member refid="class_polynomial_1aae825918182883270c868e73fc2d3aa7" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>Polynomial</name></member>
      <member refid="class_polynomial_1a748315eb1bb724c6a749e65424eca570" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>Polynomial</name></member>
      <member refid="class_polynomial_1a4cec7dfc1c9109a098aacbbdf0595373" prot="public" virt="non-virtual"><scope>Polynomial</scope><name>Polynomial</name></member>
      <member refid="class_polynomial_1abf377abb9603855135d46bf6b9efde5f" prot="private" virt="non-virtual"><scope>Polynomial</scope><name>swap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

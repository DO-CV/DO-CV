<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="group___linear_filtering" kind="group">
    <compoundname>LinearFiltering</compoundname>
    <title>2D Linear Filtering</title>
    <innerclass refid="struct_d_o_1_1_sobel" prot="public">DO::Sobel</innerclass>
    <innerclass refid="struct_d_o_1_1_sobel_3_01_t_00_012_01_4" prot="public">DO::Sobel&lt; T, 2 &gt;</innerclass>
    <innerclass refid="struct_d_o_1_1_scharr" prot="public">DO::Scharr</innerclass>
    <innerclass refid="struct_d_o_1_1_scharr_3_01_t_00_012_01_4" prot="public">DO::Scharr&lt; T, 2 &gt;</innerclass>
    <innerclass refid="struct_d_o_1_1_prewitt" prot="public">DO::Prewitt</innerclass>
    <innerclass refid="struct_d_o_1_1_prewitt_3_01_t_00_012_01_4" prot="public">DO::Prewitt&lt; T, 2 &gt;</innerclass>
    <innerclass refid="struct_d_o_1_1_roberts_cross" prot="public">DO::RobertsCross</innerclass>
    <innerclass refid="struct_d_o_1_1_roberts_cross_3_01_t_00_012_01_4" prot="public">DO::RobertsCross&lt; T, 2 &gt;</innerclass>
    <innerclass refid="struct_d_o_1_1_robinson" prot="public">DO::Robinson</innerclass>
    <innerclass refid="struct_d_o_1_1_robinson_3_01_t_00_012_01_4" prot="public">DO::Robinson&lt; T, 2 &gt;</innerclass>
    <innerclass refid="struct_d_o_1_1_kirsch" prot="public">DO::Kirsch</innerclass>
    <innerclass refid="struct_d_o_1_1_kirsch_3_01_t_00_012_01_4" prot="public">DO::Kirsch&lt; T, 2 &gt;</innerclass>
    <innerclass refid="struct_d_o_1_1_gaussian" prot="public">DO::Gaussian</innerclass>
    <innerclass refid="struct_d_o_1_1_gaussian_3_01_t_00_012_01_4" prot="public">DO::Gaussian&lt; T, 2 &gt;</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___linear_filtering_1ga3b622412cab63932a4531f7f481f0e1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DO::convolveArray</definition>
        <argsstring>(T *signal, const typename ColorTraits&lt; T &gt;::ChannelType *kernel, int signalSz, int kernelSz)</argsstring>
        <name>convolveArray</name>
        <param>
          <type>T *</type>
          <declname>signal</declname>
        </param>
        <param>
          <type>const typename ColorTraits&lt; T &gt;::ChannelType *</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>signalSz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>kernelSz</declname>
        </param>
        <briefdescription>
<para>&quot;Convolves&quot; a 1D signal <formula id="94">$f$</formula> (or 1D array), with a kernel <formula id="95">$g$</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">signal</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1D array containing the 1D signal <formula id="96">$ f = (f_i)_{1\leq i \leq N}$</formula>, the resulting signal <formula id="97">$f*g$</formula> is stored in signal. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>the &quot;convolution&quot; kernel <formula id="98">$g = (g_i)_{1 \leq i \leq K}$</formula>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">signalSz</parametername>
</parameternamelist>
<parameterdescription>
<para>the signal size <formula id="99">$N$</formula>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kernelSz</parametername>
</parameternamelist>
<parameterdescription>
<para>the kernel size <formula id="100">$K$</formula>.</para></parameterdescription>
</parameteritem>
</parameterlist>
Note that to be mathematically correct, the kernel must be symmetric, which is why every time, the term &quot;convolution&quot; is mentioned is put in quotes See the implementation for details. This function is used intensively in applyFastRowBasedFilter and applyFastColumnBasedFilter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="47" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="44" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1gac78d2553d4b060a5bcb8caec356f4942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DO::applyRowBasedFilter</definition>
        <argsstring>(Image&lt; T &gt; &amp;dst, const Image&lt; T &gt; &amp;src, const typename ColorTraits&lt; T &gt;::ChannelType *kernel, int kernelSize)</argsstring>
        <name>applyRowBasedFilter</name>
        <param>
          <type>Image&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const typename ColorTraits&lt; T &gt;::ChannelType *</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>kernelSize</declname>
        </param>
        <briefdescription>
<para>Apply 1D filter to image rows. (Slow, deprecated). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the row-filtered image. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>the input image </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>the input kernel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kernelSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the kernel size</para></parameterdescription>
</parameteritem>
</parameterlist>
Note that borders are replicated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="80" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="77" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1gae31e0e90ca788c9477f88d1243ce0896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DO::applyColumnBasedFilter</definition>
        <argsstring>(Image&lt; T &gt; &amp;dst, const Image&lt; T &gt; &amp;src, const typename ColorTraits&lt; T &gt;::ChannelType *kernel, int kernelSize)</argsstring>
        <name>applyColumnBasedFilter</name>
        <param>
          <type>Image&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const typename ColorTraits&lt; T &gt;::ChannelType *</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>kernelSize</declname>
        </param>
        <briefdescription>
<para>Apply 1D filter to image columns. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the column-filtered image. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>the input image </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>the input kernel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kernelSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the kernel size</para></parameterdescription>
</parameteritem>
</parameterlist>
Note that borders are replicated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="121" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="118" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1gad1076c16222836dcebaf4cc016283cb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DO::applyFastRowBasedFilter</definition>
        <argsstring>(Image&lt; T &gt; &amp;dst, const Image&lt; T &gt; &amp;src, const typename ColorTraits&lt; T &gt;::ChannelType *kernel, int kernelSize)</argsstring>
        <name>applyFastRowBasedFilter</name>
        <param>
          <type>Image&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const typename ColorTraits&lt; T &gt;::ChannelType *</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>kernelSize</declname>
        </param>
        <briefdescription>
<para>Apply 1D filter to image rows. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the row-filtered image. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>the input image </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>the input kernel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kernelSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the kernel size</para></parameterdescription>
</parameteritem>
</parameterlist>
Note that borders are replicated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="164" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="161" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1ga09dc57c30263f9a027598e18c970464a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DO::applyFastColumnBasedFilter</definition>
        <argsstring>(Image&lt; T &gt; &amp;dst, const Image&lt; T &gt; &amp;src, const typename ColorTraits&lt; T &gt;::ChannelType *kernel, int kernelSize)</argsstring>
        <name>applyFastColumnBasedFilter</name>
        <param>
          <type>Image&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const typename ColorTraits&lt; T &gt;::ChannelType *</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>kernelSize</declname>
        </param>
        <briefdescription>
<para>Apply 1D filter to image columns. (Slow, deprecated). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the column-filtered image. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>the input image </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>the input kernel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kernelSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the kernel size</para></parameterdescription>
</parameteritem>
</parameterlist>
Note that borders are replicated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="199" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="196" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1gaecdacf0a2cbb3b2ea97dda5f6d2c6536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DO::applyRowDerivative</definition>
        <argsstring>(Image&lt; T &gt; &amp;dst, const Image&lt; T &gt; &amp;src)</argsstring>
        <name>applyRowDerivative</name>
        <param>
          <type>Image&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>brief Apply row-derivative to image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="229" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="228" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1ga6a1a0a9d8ff920e034979ddde3258c9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DO::applyColumnDerivative</definition>
        <argsstring>(Image&lt; T &gt; &amp;dst, const Image&lt; T &gt; &amp;src)</argsstring>
        <name>applyColumnDerivative</name>
        <param>
          <type>Image&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Apply column-derivative to image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="237" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="236" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1ga006a1d392ae9a9c5cf1284e748bdcc87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DO::applyGaussianFilter</definition>
        <argsstring>(Image&lt; T &gt; &amp;dst, const Image&lt; T &gt; &amp;src, typename ColorTraits&lt; T &gt;::ChannelType sigma, typename ColorTraits&lt; T &gt;::ChannelType gaussTruncate=typename ColorTraits&lt; T &gt;::ChannelType(4))</argsstring>
        <name>applyGaussianFilter</name>
        <param>
          <type>Image&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>typename ColorTraits&lt; T &gt;::ChannelType</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>typename ColorTraits&lt; T &gt;::ChannelType</type>
          <declname>gaussTruncate</declname>
          <defval>typename ColorTraits&lt; T &gt;::ChannelType(4)</defval>
        </param>
        <briefdescription>
<para>Apply <ref refid="struct_d_o_1_1_gaussian" kindref="compound">Gaussian</ref> smoothing to image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="248" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="244" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1ga0c789c6587c9a61cabd28387c21eec78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DO::applySobelFilter</definition>
        <argsstring>(Image&lt; T &gt; &amp;dst, const Image&lt; T &gt; &amp;src)</argsstring>
        <name>applySobelFilter</name>
        <param>
          <type>Image&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="struct_d_o_1_1_sobel" kindref="compound">Sobel</ref> filter to image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="286" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="285" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1ga8bf11e5f7d19e724fd16fac28ab2a5ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DO::applyScharrFilter</definition>
        <argsstring>(Image&lt; T &gt; &amp;dst, const Image&lt; T &gt; &amp;src)</argsstring>
        <name>applyScharrFilter</name>
        <param>
          <type>Image&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="struct_d_o_1_1_scharr" kindref="compound">Scharr</ref> filter to image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="302" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="301" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1gaa987c1ac33d95684536eb7550849df63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DO::applyPrewittFilter</definition>
        <argsstring>(Image&lt; T &gt; &amp;dst, const Image&lt; T &gt; &amp;src)</argsstring>
        <name>applyPrewittFilter</name>
        <param>
          <type>Image&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="struct_d_o_1_1_prewitt" kindref="compound">Prewitt</ref> filter to image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="320" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="319" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1gae316e1bacae047bf2a770b8594696ad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DO::apply2DNonSeparableFilter</definition>
        <argsstring>(Image&lt; T &gt; &amp;dst, const Image&lt; T &gt; &amp;src, const typename ColorTraits&lt; T &gt;::ChannelType *kernel, int kWidth, int kHeight)</argsstring>
        <name>apply2DNonSeparableFilter</name>
        <param>
          <type>Image&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const typename ColorTraits&lt; T &gt;::ChannelType *</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>kWidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>kHeight</declname>
        </param>
        <briefdescription>
<para>Apply 2D non separable filter to image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="343" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="340" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1ga023bb2f35444bc0652aa0292bb2b554b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DO::applyLaplacianFilter</definition>
        <argsstring>(Image&lt; T &gt; &amp;dst, const Image&lt; T &gt; &amp;src)</argsstring>
        <name>applyLaplacianFilter</name>
        <param>
          <type>Image&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="struct_d_o_1_1_laplacian" kindref="compound">Laplacian</ref> filter (slow). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="407" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="406" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1ga36e0d65f2ffc247bf1a31c59501f457e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DO::applyRobertsCrossFilter</definition>
        <argsstring>(Image&lt; T &gt; &amp;dst, const Image&lt; T &gt; &amp;src)</argsstring>
        <name>applyRobertsCrossFilter</name>
        <param>
          <type>Image&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Apply Roberts-Cross filter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="419" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="418" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1ga88b7c8c0e0aa57abab1cacd56cf30f8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DO::applyKirschFilter</definition>
        <argsstring>(Image&lt; T &gt; &amp;dst, const Image&lt; T &gt; &amp;src)</argsstring>
        <name>applyKirschFilter</name>
        <param>
          <type>Image&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="struct_d_o_1_1_kirsch" kindref="compound">Kirsch</ref> filter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="440" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="439" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1ga9e790446a2fa0cba36f16b17e5d08a05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void DO::applyRobinsonFilter</definition>
        <argsstring>(Image&lt; T &gt; &amp;dst, const Image&lt; T &gt; &amp;src)</argsstring>
        <name>applyRobinsonFilter</name>
        <param>
          <type>Image&lt; T &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="struct_d_o_1_1_robinson" kindref="compound">Robinson</ref> filter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="485" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="484" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1ga86dbb5545941f2bad6c3a718a11c1c63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Image&lt; T &gt;</type>
        <definition>Image&lt;T&gt; DO::rowDerivative</definition>
        <argsstring>(const Image&lt; T &gt; &amp;src)</argsstring>
        <name>rowDerivative</name>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>brief Apply row-derivative to image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="533" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="532" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1ga7e121dca71a2d7b7be22871098266c0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Image&lt; T &gt;</type>
        <definition>Image&lt;T&gt; DO::columnDerivative</definition>
        <argsstring>(const Image&lt; T &gt; &amp;src)</argsstring>
        <name>columnDerivative</name>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>brief Apply column-derivative to image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="541" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="540" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1ga22af7004586fbfe6289a74490a603508" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>Image&lt; T &gt;</type>
        <definition>Image&lt;T&gt; DO::gaussian</definition>
        <argsstring>(const Image&lt; T &gt; &amp;src, S sigma, S gaussTruncate=S(4))</argsstring>
        <name>gaussian</name>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>S</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>S</type>
          <declname>gaussTruncate</declname>
          <defval>S(4)</defval>
        </param>
        <briefdescription>
<para>Apply <ref refid="struct_d_o_1_1_gaussian" kindref="compound">Gaussian</ref> smoothing to image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="549" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="548" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1ga9232c7c17367420cb0a5fc744e47f1d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Image&lt; T &gt;</type>
        <definition>Image&lt;T&gt; DO::sobel</definition>
        <argsstring>(const Image&lt; T &gt; &amp;src)</argsstring>
        <name>sobel</name>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="struct_d_o_1_1_sobel" kindref="compound">Sobel</ref> filter to image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="557" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="556" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1ga2d52311972db9b67db5b34fecc0ca778" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Image&lt; T &gt;</type>
        <definition>Image&lt;T&gt; DO::scharr</definition>
        <argsstring>(const Image&lt; T &gt; &amp;src)</argsstring>
        <name>scharr</name>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="struct_d_o_1_1_scharr" kindref="compound">Scharr</ref> filter to image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="565" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="564" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1ga2985ba2feb885ad4a15aba01b5f132a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Image&lt; T &gt;</type>
        <definition>Image&lt;T&gt; DO::prewitt</definition>
        <argsstring>(const Image&lt; T &gt; &amp;src)</argsstring>
        <name>prewitt</name>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="struct_d_o_1_1_prewitt" kindref="compound">Prewitt</ref> filter to image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="573" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="572" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1ga2161c165dead682c9d34d8cac9dd214e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Image&lt; T &gt;</type>
        <definition>Image&lt;T&gt; DO::robertsCross</definition>
        <argsstring>(const Image&lt; T &gt; &amp;src)</argsstring>
        <name>robertsCross</name>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Apply Roberts-Cross filter to image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="581" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="580" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1ga537b01359ef4d8bf3c99a830944e34a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Image&lt; T &gt;</type>
        <definition>Image&lt;T&gt; DO::laplacianFilter</definition>
        <argsstring>(const Image&lt; T &gt; &amp;src)</argsstring>
        <name>laplacianFilter</name>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="struct_d_o_1_1_laplacian" kindref="compound">Laplacian</ref> filter to image (slow). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="589" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="588" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1ga3c730e316d23b07baef040c122d4c040" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Image&lt; T &gt;</type>
        <definition>Image&lt;T&gt; DO::kirsch</definition>
        <argsstring>(const Image&lt; T &gt; &amp;src)</argsstring>
        <name>kirsch</name>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="struct_d_o_1_1_kirsch" kindref="compound">Kirsch</ref> filter to image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="597" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="596" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="group___linear_filtering_1gadf07aca2d19849bf56b6ef0011480411" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Image&lt; T &gt;</type>
        <definition>Image&lt;T&gt; DO::robinson</definition>
        <argsstring>(const Image&lt; T &gt; &amp;src)</argsstring>
        <name>robinson</name>
        <param>
          <type>const Image&lt; T &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="struct_d_o_1_1_robinson" kindref="compound">Robinson</ref> filter to image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="605" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="604" bodyend="609"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___linear_filtering_1ga3ff594caf022f8259f7e7961130c0708" prot="public" static="no">
        <name>CREATE_2D_ONLY_FILTER_FUNCTOR</name>
        <param><defname>FilterName</defname></param>
        <param><defname>function</defname></param>
        <initializer>/*! \brief Helper class to use Image&lt;T,N&gt;::compute&lt;FilterName&gt;() */ \
  template &lt;typename T, int N&gt; struct FilterName;                     \
  template &lt;typename T&gt; struct FilterName&lt;T,2&gt;                        \
  {                                                                   \
    typedef Image&lt;T&gt; ReturnType;                                      \
    inline FilterName(const Image&lt;T&gt;&amp; src) : src_(src) {}             \
    inline ReturnType operator()() const { return function(src_); }   \
    const Image&lt;T&gt;&amp; src_;                                             \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="622" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="613" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___linear_filtering_1ga0824a5198f914aa44a8ef25d83ce51f5" prot="public" static="no">
        <name>CREATE_2D_ONLY_FILTER_FUNCTOR_WITH_PARAM</name>
        <param><defname>FilterName</defname></param>
        <param><defname>function</defname></param>
        <initializer>/*! \brief Helper class to use Image&lt;T,N&gt;::compute&lt;FilterName&gt;() */   \
  template &lt;typename T, int N&gt; struct FilterName;                       \
  template &lt;typename T&gt; struct FilterName&lt;T,2&gt;                          \
  {                                                                     \
    typedef Image&lt;T&gt; ReturnType;                                        \
    typedef typename ColorTraits&lt;T&gt;::ChannelType ParamType;             \
    inline FilterName(const Image&lt;T&gt;&amp; src) : src_(src) {}               \
    inline ReturnType operator()(const ParamType&amp; param) const          \
    { return function(src_, param); }                                   \
    const Image&lt;T&gt;&amp; src_;                                               \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" line="635" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/LinearFiltering.hpp" bodystart="624" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="_differential_8hpp" kind="file">
    <compoundname>Differential.hpp</compoundname>
    <includedby refid="_image_processing_8hpp" local="yes">C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing.hpp</includedby>
    <invincdepgraph>
      <node id="1653">
        <label>C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/Differential.hpp</label>
        <link refid="Differential.hpp"/>
        <childnode refid="1654" relation="include">
        </childnode>
      </node>
      <node id="1655">
        <label>C:/Users/David/Desktop/GitHub/DO-CV/src/DO/FeatureDescriptors.hpp</label>
        <link refid="_feature_descriptors_8hpp"/>
      </node>
      <node id="1656">
        <label>C:/Users/David/Desktop/GitHub/DO-CV/src/DO/FeatureDetectors.hpp</label>
        <link refid="_feature_detectors_8hpp"/>
      </node>
      <node id="1654">
        <label>C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing.hpp</label>
        <link refid="_image_processing_8hpp"/>
        <childnode refid="1655" relation="include">
        </childnode>
        <childnode refid="1656" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_d_o_1_1_differential" prot="public">DO::Differential</innerclass>
    <innerclass refid="struct_d_o_1_1_differential_3_01_n_00_010_01_4" prot="public">DO::Differential&lt; N, 0 &gt;</innerclass>
    <innerclass refid="struct_d_o_1_1_gradient" prot="public">DO::Gradient</innerclass>
    <innerclass refid="struct_d_o_1_1_laplacian" prot="public">DO::Laplacian</innerclass>
    <innerclass refid="struct_d_o_1_1_hessian" prot="public">DO::Hessian</innerclass>
    <innernamespace refid="namespace_d_o">DO</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>==========================================================================<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>DO++,<sp/>a<sp/>basic<sp/>set<sp/>of<sp/>libraries<sp/>in<sp/>C++<sp/>for<sp/>computer<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>vision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2013<sp/>David<sp/>Ok<sp/>&lt;david.ok8@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>Source<sp/>Code<sp/>Form<sp/>is<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Mozilla<sp/>Public<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>License<sp/>v.<sp/>2.0.<sp/>If<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>MPL<sp/>was<sp/>not<sp/>distributed<sp/>with<sp/>this<sp/>file,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>can<sp/>obtain<sp/>one<sp/>at<sp/>http://mozilla.org/MPL/2.0/.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================================================================<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DO_IMAGEPROCESSING_DIFFERENTIAL_HPP</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DO_IMAGEPROCESSING_DIFFERENTIAL_HPP</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">DO<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Axis&gt;</highlight></codeline>
<codeline lineno="27" refid="struct_d_o_1_1_differential" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_d_o_1_1_differential" kindref="compound" tooltip="Internals.">Differential</ref></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>DO_STATIC_ASSERT(Axis<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>Axis<sp/>&lt;<sp/>N,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AXIS_MUST_NONNEGATIVE_AND_LESS_THAN_N);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsConst,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StorageOrder&gt;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>eval_partial_derivative(<ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">RangeIterator&lt;IsConst, T, N, StorageOrder&gt;</ref>&amp;<sp/>it)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(it.template<sp/>axis&lt;Axis&gt;()[1]<sp/>-<sp/>it.template<sp/>axis&lt;Axis&gt;()[-1])</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(2);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsConst,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StorageOrder&gt;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>accumulate_neighbor_values(<ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">RangeIterator&lt;IsConst, T, N, StorageOrder&gt;</ref>&amp;<sp/>it)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it.template<sp/>axis&lt;Axis&gt;()[1]+it.template<sp/>axis&lt;Axis&gt;()[-1]</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="struct_d_o_1_1_differential" kindref="compound" tooltip="Internals.">Differential&lt;N, Axis-1&gt;::accumulate_neighbor_values</ref>(it);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsConst,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StorageOrder&gt;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>eval_gradient(Matrix&lt;T,N,1&gt;&amp;<sp/>g,<sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">RangeIterator&lt;IsConst,T,N,StorageOrder&gt;</ref>&amp;<sp/>it)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g[Axis]<sp/>=<sp/>eval_partial_derivative(it);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_d_o_1_1_differential" kindref="compound" tooltip="Internals.">Differential&lt;N, Axis-1&gt;::eval_gradient</ref>(g,<sp/>it);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsConst,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StorageOrder&gt;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>eval_laplacian(<ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">RangeIterator&lt;IsConst, T, N, StorageOrder&gt;</ref>&amp;<sp/>loc)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>accumulate_neighbor_values(loc)<sp/>-<sp/>2*N*(*loc);<sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsConst,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StorageOrder&gt;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>eval_divergence(<ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">RangeIterator</ref>&lt;IsConst,<sp/>Matrix&lt;T,N,1&gt;,<sp/>N,<sp/>StorageOrder&gt;&amp;<sp/>it)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eval_partial_derivative(it)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><ref refid="struct_d_o_1_1_differential" kindref="compound" tooltip="Internals.">Differential&lt;N, Axis-1&gt;::eval_divergence</ref>(it);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="72" refid="struct_d_o_1_1_differential_3_01_n_00_010_01_4" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_d_o_1_1_differential" kindref="compound" tooltip="Internals.">Differential</ref>&lt;N,0&gt;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsConst,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StorageOrder&gt;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>eval_partial_derivative(<ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">RangeIterator&lt;IsConst, T, N, StorageOrder&gt;</ref>&amp;<sp/>it)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(it.template<sp/>axis&lt;0&gt;()[1]<sp/>-<sp/>it.template<sp/>axis&lt;0&gt;()[-1])</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(2);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsConst,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StorageOrder&gt;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>accumulate_neighbor_values(<ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">RangeIterator&lt;IsConst, T, N, StorageOrder&gt;</ref>&amp;<sp/>it)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it.template<sp/>axis&lt;0&gt;()[1]<sp/>+<sp/>it.template<sp/>axis&lt;0&gt;()[-1];<sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsConst,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StorageOrder&gt;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>eval_gradient(Matrix&lt;T,N,1&gt;&amp;<sp/>g,<sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">RangeIterator&lt;IsConst,T,N,StorageOrder&gt;</ref>&amp;<sp/>it)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>g[0]<sp/>=<sp/>eval_partial_derivative(it);<sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsConst,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StorageOrder&gt;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>eval_divergence(<ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">RangeIterator</ref>&lt;IsConst,<sp/>Matrix&lt;T,N,1&gt;,<sp/>N,<sp/>StorageOrder&gt;&amp;<sp/>it)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eval_partial_derivative(it);<sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>2&gt;</highlight></codeline>
<codeline lineno="100" refid="struct_d_o_1_1_gradient" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_d_o_1_1_gradient" kindref="compound" tooltip="Gradient functor class.">Gradient</ref></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>Scalar;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Matrix&lt;T,<sp/>N,<sp/>1&gt;<sp/>Vector;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Matrix&lt;int,<sp/>N,<sp/>1&gt;<sp/>Coords;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound">Image&lt;T, N&gt;</ref><sp/><ref refid="class_d_o_1_1_image" kindref="compound">ScalarField</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound" tooltip="The forward declaration of the image class.">Image&lt;Vector, N&gt;</ref><sp/><ref refid="class_d_o_1_1_image" kindref="compound" tooltip="The forward declaration of the image class.">VectorField</ref>,<sp/><ref refid="class_d_o_1_1_image" kindref="compound" tooltip="The forward declaration of the image class.">ReturnType</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">ScalarField::const_range_iterator</ref><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">ScalarIterator</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">VectorField::range_iterator</ref><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">VectorIterator</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_d_o_1_1_gradient" kindref="compound" tooltip="Gradient functor class.">Gradient</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound">ScalarField</ref>&amp;<sp/>scalarField)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>scalar_field_(scalarField)<sp/>{}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(Vector&amp;<sp/>g,<sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">ScalarIterator</ref>&amp;<sp/>loc)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="114"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/><ref refid="struct_d_o_1_1_differential" kindref="compound" tooltip="Internals.">Differential&lt;N, N-1&gt;::eval_gradient</ref>(g,<sp/>loc);<sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(Vector&amp;<sp/>g,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Coords&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="117"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">ScalarIterator</ref><sp/>loc(scalar_field_.<ref refid="class_d_o_1_1_multi_array_1ab90f193517fda2b4390b14eba239dd5d" kindref="member" tooltip="Mutable locator.">begin_range</ref>(p));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;operator()(g,<sp/>loc);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="class_d_o_1_1_image" kindref="compound" tooltip="The forward declaration of the image class.">VectorField</ref>&amp;<sp/>dst)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="123"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dst.<ref refid="class_d_o_1_1_multi_array_1a15f0ce2877b385c9505f042faa705694" kindref="member" tooltip="Size getter.">sizes</ref>()<sp/>!=<sp/>scalar_field_.<ref refid="class_d_o_1_1_multi_array_1a15f0ce2877b385c9505f042faa705694" kindref="member" tooltip="Size getter.">sizes</ref>())</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst.<ref refid="class_d_o_1_1_multi_array_1a3f049389446e1c60e25f09be5b64f192" kindref="member" tooltip="Resizing method.">resize</ref>(scalar_field_.<ref refid="class_d_o_1_1_multi_array_1a15f0ce2877b385c9505f042faa705694" kindref="member" tooltip="Size getter.">sizes</ref>());</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">ScalarIterator</ref><sp/>src_loc(scalar_field_.<ref refid="class_d_o_1_1_multi_array_1ab90f193517fda2b4390b14eba239dd5d" kindref="member" tooltip="Mutable locator.">begin_range</ref>());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">ScalarIterator</ref><sp/>src_loc_end(scalar_field_.end_range());</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">VectorIterator</ref><sp/>dst_loc(dst.<ref refid="class_d_o_1_1_multi_array_1ab90f193517fda2b4390b14eba239dd5d" kindref="member" tooltip="Mutable locator.">begin_range</ref>());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>src_loc<sp/>!=<sp/>src_loc_end;<sp/>++src_loc,<sp/>++dst_loc)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">()(*dst_loc,<sp/>src_loc);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_image" kindref="compound" tooltip="The forward declaration of the image class.">VectorField</ref><sp/>operator()()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="135"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_image" kindref="compound" tooltip="The forward declaration of the image class.">VectorField</ref><sp/>gradField;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>operator()(gradField);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gradField;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound">ScalarField</ref>&amp;<sp/>scalar_field_;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>2&gt;</highlight></codeline>
<codeline lineno="146" refid="struct_d_o_1_1_laplacian" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_d_o_1_1_laplacian" kindref="compound" tooltip="Laplacian functor class.">Laplacian</ref></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Matrix&lt;int,<sp/>N,<sp/>1&gt;<sp/>Coords;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound">Image&lt;T, N&gt;</ref><sp/><ref refid="class_d_o_1_1_image" kindref="compound">ScalarField</ref>,<sp/><ref refid="class_d_o_1_1_image" kindref="compound">ReturnType</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">ScalarField::range_iterator</ref><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">RangeIterator</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">ScalarField::const_range_iterator</ref><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">ConstRangeIterator</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_d_o_1_1_laplacian" kindref="compound" tooltip="Laplacian functor class.">Laplacian</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound">ScalarField</ref>&amp;<sp/>scalarField)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>scalar_field_(scalarField)<sp/>{}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>operator()(<ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">ConstRangeIterator</ref>&amp;<sp/>loc)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="157"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_d_o_1_1_differential" kindref="compound" tooltip="Internals.">Differential&lt;N, N-1&gt;::eval_laplacian</ref>(loc);<sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Coords&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="160"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">ConstRangeIterator</ref><sp/>loc(scalar_field_.<ref refid="class_d_o_1_1_multi_array_1ab90f193517fda2b4390b14eba239dd5d" kindref="member" tooltip="Mutable locator.">begin_range</ref>(p));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;operator()(loc);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="class_d_o_1_1_image" kindref="compound">ScalarField</ref>&amp;<sp/>dst)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="166"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dst.<ref refid="class_d_o_1_1_multi_array_1a15f0ce2877b385c9505f042faa705694" kindref="member" tooltip="Size getter.">sizes</ref>()<sp/>!=<sp/>scalar_field_.<ref refid="class_d_o_1_1_multi_array_1a15f0ce2877b385c9505f042faa705694" kindref="member" tooltip="Size getter.">sizes</ref>())</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst.<ref refid="class_d_o_1_1_multi_array_1a3f049389446e1c60e25f09be5b64f192" kindref="member" tooltip="Resizing method.">resize</ref>(scalar_field_.<ref refid="class_d_o_1_1_multi_array_1a15f0ce2877b385c9505f042faa705694" kindref="member" tooltip="Size getter.">sizes</ref>());</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">ConstRangeIterator</ref><sp/>src_it(scalar_field_.<ref refid="class_d_o_1_1_multi_array_1ab90f193517fda2b4390b14eba239dd5d" kindref="member" tooltip="Mutable locator.">begin_range</ref>());</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">ConstRangeIterator</ref><sp/>src_it_end(scalar_field_.end_range());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">RangeIterator</ref><sp/>dst_it(dst.<ref refid="class_d_o_1_1_multi_array_1ab90f193517fda2b4390b14eba239dd5d" kindref="member" tooltip="Mutable locator.">begin_range</ref>());</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>src_it<sp/>!=<sp/>src_it_end;<sp/>++src_it,<sp/>++dst_it)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dst_it<sp/>=<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">()(src_it);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_image" kindref="compound">ScalarField</ref><sp/>operator()()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="179"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_image" kindref="compound">ScalarField</ref><sp/>lapField;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>operator()(lapField);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lapField;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound">ScalarField</ref>&amp;<sp/>scalar_field_;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>2&gt;</highlight></codeline>
<codeline lineno="190" refid="struct_d_o_1_1_hessian" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_d_o_1_1_hessian" kindref="compound" tooltip="Hessian matrix functor class.">Hessian</ref></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Matrix&lt;int,<sp/>N,<sp/>1&gt;<sp/>Coords,<sp/>Vector;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound">Image&lt;T, N&gt;</ref><sp/><ref refid="class_d_o_1_1_image" kindref="compound">ScalarField</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Matrix&lt;T,<sp/>N,<sp/>N&gt;<sp/>HessianMatrix;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound" tooltip="The forward declaration of the image class.">Image&lt;HessianMatrix, N&gt;</ref><sp/><ref refid="class_d_o_1_1_image" kindref="compound" tooltip="The forward declaration of the image class.">HessianField</ref>,<sp/><ref refid="class_d_o_1_1_image" kindref="compound" tooltip="The forward declaration of the image class.">ReturnType</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">ScalarField::const_range_iterator</ref><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">ScalarIterator</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">HessianField::range_iterator</ref><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">MatrixIterator</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_d_o_1_1_hessian" kindref="compound" tooltip="Hessian matrix functor class.">Hessian</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound">ScalarField</ref>&amp;<sp/>scalarField)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>scalar_field_(scalarField)<sp/>{}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(HessianMatrix&amp;<sp/><ref refid="struct_d_o_1_1_h" kindref="compound" tooltip="Hue channel name (HSV).">H</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">ScalarIterator</ref>&amp;<sp/>loc)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="203"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/>loc.<ref refid="class_d_o_1_1_range_iterator_base_1afb44c4cbe26265d288f5384066c0346d" kindref="member" tooltip="Get the current coordinates.">coords</ref>().minCoeff()<sp/>&lt;<sp/>2<sp/>||<sp/></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(loc.<ref refid="class_d_o_1_1_range_iterator_base_1a15f0ce2877b385c9505f042faa705694" kindref="member" tooltip="Get the sizes.">sizes</ref>()<sp/>-<sp/>loc.<ref refid="class_d_o_1_1_range_iterator_base_1afb44c4cbe26265d288f5384066c0346d" kindref="member" tooltip="Get the current coordinates.">coords</ref>()).minCoeff()<sp/>&lt;<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.setZero();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>++i)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i;<sp/>j<sp/>&lt;<sp/>N;<sp/>++j)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>j)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H(i,i)<sp/>=<sp/>(<sp/>loc(delta(i,1))<sp/>-<sp/>T(2)*(*loc)<sp/>+<sp/>loc(delta(i,-1))<sp/>)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>static_cast&lt;T&gt;(4);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H(i,j)<sp/>=<sp/>(<sp/><sp/>loc(delta(i,1,j,<sp/>1))<sp/>-<sp/>loc(delta(i,-1,j,<sp/>1))</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>loc(delta(i,1,j,-1))<sp/>+<sp/>loc(delta(i,-1,j,-1))<sp/>)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>static_cast&lt;T&gt;(4);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H(j,i)<sp/>=<sp/>H(i,j);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(HessianMatrix&amp;<sp/>H,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Coords&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="228"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">ScalarIterator</ref><sp/>loc(scalar_field_.<ref refid="class_d_o_1_1_multi_array_1ab90f193517fda2b4390b14eba239dd5d" kindref="member" tooltip="Mutable locator.">begin_range</ref>(p));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>operator()(H,<sp/>loc);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="class_d_o_1_1_image" kindref="compound" tooltip="The forward declaration of the image class.">HessianField</ref>&amp;<sp/>dst)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="234"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dst.<ref refid="class_d_o_1_1_multi_array_1a15f0ce2877b385c9505f042faa705694" kindref="member" tooltip="Size getter.">sizes</ref>()<sp/>!=<sp/>scalar_field_.<ref refid="class_d_o_1_1_multi_array_1a15f0ce2877b385c9505f042faa705694" kindref="member" tooltip="Size getter.">sizes</ref>())</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst.<ref refid="class_d_o_1_1_multi_array_1a3f049389446e1c60e25f09be5b64f192" kindref="member" tooltip="Resizing method.">resize</ref>(scalar_field_.<ref refid="class_d_o_1_1_multi_array_1a15f0ce2877b385c9505f042faa705694" kindref="member" tooltip="Size getter.">sizes</ref>());</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">ScalarIterator</ref><sp/>src_loc(scalar_field_.<ref refid="class_d_o_1_1_multi_array_1ab90f193517fda2b4390b14eba239dd5d" kindref="member" tooltip="Mutable locator.">begin_range</ref>());</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">ScalarIterator</ref><sp/>src_end(scalar_field_.end_range());</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_range_iterator" kindref="compound" tooltip="N-dimensional iterator class. In any case the &amp;#39;RangeIterator&amp;#39; class is a heavy object. It is mostly useful for differential calculus. Otherwise prefer using other iterator instead.">MatrixIterator</ref><sp/>dst_loc(dst.<ref refid="class_d_o_1_1_multi_array_1ab90f193517fda2b4390b14eba239dd5d" kindref="member" tooltip="Mutable locator.">begin_range</ref>());</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>src_loc<sp/>!=<sp/>src_end;<sp/>++src_loc,<sp/>++dst_loc)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">()(*dst_loc,<sp/>src_loc);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_image" kindref="compound" tooltip="The forward declaration of the image class.">HessianField</ref><sp/>operator()()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="246"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_image" kindref="compound" tooltip="The forward declaration of the image class.">HessianField</ref><sp/>hessianField;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>operator()(hessianField);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hessianField;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Coords<sp/>delta(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dy)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="253"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Coords<sp/>unit(Coords::Zero());</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unit[i]<sp/>=<sp/>dx;<sp/>unit[j]<sp/>=<sp/>dy;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unit;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Coords<sp/>delta(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="260"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Coords::Unit(i)*dx;<sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound">ScalarField</ref>&amp;<sp/>scalar_field_;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="272" refid="group___differential_1ga3b68fc0aa689b2bcdb6a1a556da93eec" refkind="member"><highlight class="normal"><sp/><sp/>Matrix&lt;T,N,1&gt;<sp/><ref refid="group___differential_1ga3b68fc0aa689b2bcdb6a1a556da93eec" kindref="member" tooltip="Gradient computation.">gradient</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound">Image&lt;T, N&gt;</ref>&amp;<sp/>src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matrix&lt;int,<sp/>N,<sp/>1&gt;&amp;<sp/>p)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T,N,1&gt;<sp/>g;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_d_o_1_1_gradient" kindref="compound" tooltip="Gradient functor class.">Gradient&lt;T, N&gt;</ref><sp/>computeGradient(src);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>computeGradient(g,<sp/>p);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="285" refid="group___differential_1ga19bf84abd269ae3dd5a322008cd7495b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___differential_1ga3b68fc0aa689b2bcdb6a1a556da93eec" kindref="member" tooltip="Gradient computation.">gradient</ref>(<ref refid="class_d_o_1_1_image" kindref="compound" tooltip="The forward declaration of the image class.">Image</ref>&lt;Matrix&lt;T,N,1&gt;,<sp/>N&gt;&amp;<sp/>dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound">Image&lt;T, N&gt;</ref>&amp;<sp/>src)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_d_o_1_1_gradient" kindref="compound" tooltip="Gradient functor class.">Gradient&lt;T, N&gt;</ref><sp/>computeGradient(src);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>computeGradient(dst);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="296" refid="group___differential_1ga96135e1292050104f2b02f99cc7df69d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_d_o_1_1_image" kindref="compound" tooltip="The forward declaration of the image class.">Image&lt;Matrix&lt;T,N,1&gt;</ref>,<sp/>N&gt;<sp/><ref refid="group___differential_1ga3b68fc0aa689b2bcdb6a1a556da93eec" kindref="member" tooltip="Gradient computation.">gradient</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound">Image&lt;T, N&gt;</ref>&amp;<sp/>src)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_image" kindref="compound" tooltip="The forward declaration of the image class.">Image&lt;Matrix&lt;T,N,1&gt;</ref>,<sp/>N&gt;<sp/>g;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___differential_1ga3b68fc0aa689b2bcdb6a1a556da93eec" kindref="member" tooltip="Gradient computation.">gradient</ref>(g,<sp/>src);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="309" refid="group___differential_1gad4dc35278f3799f4130399a34521c4eb" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="group___differential_1gad4dc35278f3799f4130399a34521c4eb" kindref="member" tooltip="Laplacian computation.">laplacian</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound">Image&lt;T, N&gt;</ref>&amp;<sp/>src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matrix&lt;int,<sp/>N,<sp/>1&gt;&amp;<sp/>p)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_d_o_1_1_laplacian" kindref="compound" tooltip="Laplacian functor class.">Laplacian&lt;T, N&gt;</ref><sp/>computeLaplacian(src);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>computeLaplacian(p);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="320" refid="group___differential_1ga487ed381811c3871bd06cfe631f32f83" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___differential_1gad4dc35278f3799f4130399a34521c4eb" kindref="member" tooltip="Laplacian computation.">laplacian</ref>(<ref refid="class_d_o_1_1_image" kindref="compound">Image&lt;T, N&gt;</ref>&amp;<sp/>dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound">Image&lt;T, N&gt;</ref>&amp;<sp/>src)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_d_o_1_1_laplacian" kindref="compound" tooltip="Laplacian functor class.">Laplacian&lt;T, N&gt;</ref><sp/>computeLaplacian(src);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>computeLaplacian(dst);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="331" refid="group___differential_1ga0f34e33582aeb726da5f618f78c8ad7b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_d_o_1_1_image" kindref="compound">Image&lt;T, N&gt;</ref><sp/><ref refid="group___differential_1gad4dc35278f3799f4130399a34521c4eb" kindref="member" tooltip="Laplacian computation.">laplacian</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound">Image&lt;T, N&gt;</ref>&amp;<sp/>src)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_image" kindref="compound">Image&lt;T, N&gt;</ref><sp/>l;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___differential_1gad4dc35278f3799f4130399a34521c4eb" kindref="member" tooltip="Laplacian computation.">laplacian</ref>(l,<sp/>src);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="344" refid="group___differential_1gac0b0ba5fdd1608dd1290e127fb3f22bb" refkind="member"><highlight class="normal"><sp/><sp/>Matrix&lt;T,N,N&gt;<sp/><ref refid="group___differential_1gac0b0ba5fdd1608dd1290e127fb3f22bb" kindref="member" tooltip="Hessian matrix computation.">hessian</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound">Image&lt;T, N&gt;</ref>&amp;<sp/>src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matrix&lt;int,<sp/>N,<sp/>1&gt;&amp;<sp/>p)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T,N,N&gt;<sp/><ref refid="struct_d_o_1_1_h" kindref="compound" tooltip="Hue channel name (HSV).">H</ref>;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_d_o_1_1_hessian" kindref="compound" tooltip="Hessian matrix functor class.">Hessian&lt;T, N&gt;</ref><sp/>computeHessian(src);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>computeHessian(H,<sp/>p);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="357" refid="group___differential_1gaa0dfb4cdf49f06188df9b5fbb1f251d5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___differential_1gac0b0ba5fdd1608dd1290e127fb3f22bb" kindref="member" tooltip="Hessian matrix computation.">hessian</ref>(<ref refid="class_d_o_1_1_image" kindref="compound" tooltip="The forward declaration of the image class.">Image</ref>&lt;Matrix&lt;T,N,N&gt;<sp/>&gt;&amp;<sp/>dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound">Image&lt;T,N&gt;</ref>&amp;<sp/>src)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_d_o_1_1_hessian" kindref="compound" tooltip="Hessian matrix functor class.">Hessian&lt;T, N&gt;</ref><sp/>computeHessian(src);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>computeHessian(dst);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="368" refid="group___differential_1gabce7c4e0432985de285764ff74bdae95" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_d_o_1_1_image" kindref="compound" tooltip="The forward declaration of the image class.">Image&lt;Matrix&lt;T,N,N&gt;</ref><sp/>&gt;<sp/><ref refid="group___differential_1gac0b0ba5fdd1608dd1290e127fb3f22bb" kindref="member" tooltip="Hessian matrix computation.">hessian</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_d_o_1_1_image" kindref="compound">Image&lt;T,N&gt;</ref>&amp;<sp/>src)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_d_o_1_1_image" kindref="compound" tooltip="The forward declaration of the image class.">Image&lt;Matrix&lt;T, N, N&gt;</ref><sp/>&gt;<sp/>h;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___differential_1gac0b0ba5fdd1608dd1290e127fb3f22bb" kindref="member" tooltip="Hessian matrix computation.">hessian</ref>(h,<sp/>src);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>DO<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DO_IMAGEPROCESSING_DIFFERENTIAL_HPP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/ImageProcessing/Differential.hpp"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="class_d_o_1_1_k_d_tree" kind="class" prot="public">
    <compoundname>DO::KDTree</compoundname>
    <includes refid="_k_d_tree_2_k_d_tree_8hpp" local="no">KDTree.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_d_o_1_1_k_d_tree_1aaeccc90de828b8c4c64bb8784fffc57d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool wrapped_data_</definition>
        <argsstring></argsstring>
        <name>wrapped_data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="180" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_d_o_1_1_k_d_tree_1af78543699de777a8de899494184873de" prot="private" static="no" mutable="no">
        <type>flann::Matrix&lt; double &gt;</type>
        <definition>flann::Matrix&lt;double&gt; data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="181" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_d_o_1_1_k_d_tree_1ab4bd4fc683b155c206ca5313419e8878" prot="private" static="no" mutable="no">
        <type>flann::Index&lt; flann::L2&lt; double &gt; &gt;</type>
        <definition>flann::Index&lt;flann::L2&lt;double&gt; &gt; index_</definition>
        <argsstring></argsstring>
        <name>index_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="182" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_d_o_1_1_k_d_tree_1ad29928d9bf40130061a278a66588541d" prot="private" static="no" mutable="no">
        <type>flann::KDTreeIndexParams</type>
        <definition>flann::KDTreeIndexParams index_params_</definition>
        <argsstring></argsstring>
        <name>index_params_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="183" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_d_o_1_1_k_d_tree_1a636980ad4022b7a4ad300e6f6bf10bb3" prot="private" static="no" mutable="no">
        <type>flann::SearchParams</type>
        <definition>flann::SearchParams search_params_</definition>
        <argsstring></argsstring>
        <name>search_params_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="184" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" bodystart="184" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1a3675d821ba5bb5c9d03dc682618c369c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KDTree</definition>
        <argsstring>(const MatrixXd &amp;colMajorColStackedDataMatrix, const flann::KDTreeIndexParams &amp;indexParams=flann::KDTreeIndexParams(1), const flann::SearchParams &amp;searchParams=flann::SearchParams(-1))</argsstring>
        <name>KDTree</name>
        <param>
          <type>const MatrixXd &amp;</type>
          <declname>colMajorColStackedDataMatrix</declname>
        </param>
        <param>
          <type>const flann::KDTreeIndexParams &amp;</type>
          <declname>indexParams</declname>
          <defval>flann::KDTreeIndexParams(1)</defval>
        </param>
        <param>
          <type>const flann::SearchParams &amp;</type>
          <declname>searchParams</declname>
          <defval>flann::SearchParams(-1)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="51"/>
      </memberdef>
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1a9751ca30660b9a4003ff4e9b79e4e1b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~KDTree</definition>
        <argsstring>()</argsstring>
        <name>~KDTree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="52"/>
      </memberdef>
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1aff5b51190734bbf0ae15f58d370a8d55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>int</type>
            <declname>Options</declname>
            <defname>Options</defname>
          </param>
          <param>
            <type>int</type>
            <declname>MaxRows</declname>
            <defname>MaxRows</defname>
          </param>
          <param>
            <type>int</type>
            <declname>MaxCols</declname>
            <defname>MaxCols</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void knnSearch</definition>
        <argsstring>(const Matrix&lt; double, N, 1, Options, MaxRows, MaxCols &gt; &amp;query, size_t k, std::vector&lt; int &gt; &amp;indices, std::vector&lt; double &gt; &amp;sqDists, bool remove1NN=false)</argsstring>
        <name>knnSearch</name>
        <param>
          <type>const Matrix&lt; double, N, 1, Options, MaxRows, MaxCols &gt; &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>sqDists</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>remove1NN</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Basic k-NN search wrapped function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="60" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" bodystart="56" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1a11d7bdc9d8b1b123937f94a3ddef756b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>int</type>
            <declname>Options</declname>
            <defname>Options</defname>
          </param>
          <param>
            <type>int</type>
            <declname>MaxRows</declname>
            <defname>MaxRows</defname>
          </param>
          <param>
            <type>int</type>
            <declname>MaxCols</declname>
            <defname>MaxCols</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void knnSearch</definition>
        <argsstring>(const Matrix&lt; double, N, 1, Options, MaxRows, MaxCols &gt; &amp;query, size_t k, std::vector&lt; int &gt; &amp;indices, bool remove1NN=false)</argsstring>
        <name>knnSearch</name>
        <param>
          <type>const Matrix&lt; double, N, 1, Options, MaxRows, MaxCols &gt; &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>remove1NN</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Basic k-NN search wrapped function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="78" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" bodystart="75" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1a81d8a8303a45942a63711f8947c767fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void knnSearch</definition>
        <argsstring>(const MatrixXd &amp;queries, size_t k, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;indices, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;sqDists, bool remove1NN=false)</argsstring>
        <name>knnSearch</name>
        <param>
          <type>const MatrixXd &amp;</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
          <declname>sqDists</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>remove1NN</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Basic k-NN search wrapped function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="96"/>
      </memberdef>
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1af7d24dfdd085578d8bbea18a11996f93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void knnSearch</definition>
        <argsstring>(const MatrixXd &amp;queries, size_t k, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;indices, bool remove1NN=false)</argsstring>
        <name>knnSearch</name>
        <param>
          <type>const MatrixXd &amp;</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>remove1NN</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Basic k-NN search wrapped function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="100"/>
      </memberdef>
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1abe7a4e079c6cb7eb7dca73aa4650fcd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void knnSearch</definition>
        <argsstring>(size_t i, size_t k, std::vector&lt; int &gt; &amp;indices, std::vector&lt; double &gt; &amp;sqDists)</argsstring>
        <name>knnSearch</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>sqDists</declname>
        </param>
        <briefdescription>
<para>In case the point query is a point in data, call this method preferably. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="103"/>
      </memberdef>
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1ab14cc83d3a796260625345c1ca43bec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void knnSearch</definition>
        <argsstring>(size_t i, size_t k, std::vector&lt; int &gt; &amp;indices)</argsstring>
        <name>knnSearch</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>In case the point query is a point in data, call this method preferably. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="105"/>
      </memberdef>
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1ab3823b04d9b4bf4aa015fef1b11eea07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void knnSearch</definition>
        <argsstring>(const std::vector&lt; size_t &gt; &amp;queries, size_t k, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;indices, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;sqDists)</argsstring>
        <name>knnSearch</name>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
          <declname>sqDists</declname>
        </param>
        <briefdescription>
<para>In case the point query is a point in data, call this method preferably. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="109"/>
      </memberdef>
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1a2a06fc08629001cb675f7b40bd287fc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void knnSearch</definition>
        <argsstring>(const std::vector&lt; size_t &gt; &amp;queries, size_t k, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;indices)</argsstring>
        <name>knnSearch</name>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>In case the point query is a point in data, call this method preferably. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="112"/>
      </memberdef>
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1a4300321abdb8f70c0f6b258cff7b5110" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>int</type>
            <declname>Options</declname>
            <defname>Options</defname>
          </param>
          <param>
            <type>int</type>
            <declname>MaxRows</declname>
            <defname>MaxRows</defname>
          </param>
          <param>
            <type>int</type>
            <declname>MaxCols</declname>
            <defname>MaxCols</defname>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t radiusSearch</definition>
        <argsstring>(const Matrix&lt; double, N, 1, Options, MaxRows, MaxCols &gt; &amp;query, double sqSearchRadius, std::vector&lt; int &gt; &amp;indices, std::vector&lt; double &gt; &amp;sqDists, bool remove1NN=false)</argsstring>
        <name>radiusSearch</name>
        <param>
          <type>const Matrix&lt; double, N, 1, Options, MaxRows, MaxCols &gt; &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sqSearchRadius</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>sqDists</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>remove1NN</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Basic radius search wrapped function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="120" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" bodystart="116" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1a6e2663447313ea234eaceae90af3d452" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>int</type>
            <declname>Options</declname>
            <defname>Options</defname>
          </param>
          <param>
            <type>int</type>
            <declname>MaxRows</declname>
            <defname>MaxRows</defname>
          </param>
          <param>
            <type>int</type>
            <declname>MaxCols</declname>
            <defname>MaxCols</defname>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t radiusSearch</definition>
        <argsstring>(const Matrix&lt; double, N, 1, Options, MaxRows, MaxCols &gt; &amp;query, double sqSearchRadius, std::vector&lt; int &gt; &amp;indices, bool remove1NN=false)</argsstring>
        <name>radiusSearch</name>
        <param>
          <type>const Matrix&lt; double, N, 1, Options, MaxRows, MaxCols &gt; &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sqSearchRadius</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>remove1NN</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Basic radius search wrapped function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="137" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" bodystart="134" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1a076742534911f9631d45df58f38c0553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void radiusSearch</definition>
        <argsstring>(const MatrixXd &amp;queries, double sqSearchRadius, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;indices, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;sqDists, bool remove1NN=false)</argsstring>
        <name>radiusSearch</name>
        <param>
          <type>const MatrixXd &amp;</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sqSearchRadius</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
          <declname>sqDists</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>remove1NN</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Basic radius search wrapped function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="154"/>
      </memberdef>
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1a5c20e2748a9d220c471db28d487f6dc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void radiusSearch</definition>
        <argsstring>(const MatrixXd &amp;queries, double sqSearchRadius, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;indices, bool remove1NN)</argsstring>
        <name>radiusSearch</name>
        <param>
          <type>const MatrixXd &amp;</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sqSearchRadius</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>remove1NN</declname>
        </param>
        <briefdescription>
<para>Basic radius search wrapped function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="158"/>
      </memberdef>
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1ac533d02ed935b4b95318f8a6290f1c2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int radiusSearch</definition>
        <argsstring>(size_t i, double sqSearchRadius, std::vector&lt; int &gt; &amp;indices, std::vector&lt; double &gt; &amp;sqDists)</argsstring>
        <name>radiusSearch</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sqSearchRadius</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>sqDists</declname>
        </param>
        <briefdescription>
<para>In case the point query is a point in data, call this method preferably. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="161"/>
      </memberdef>
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1a63feb9493ad6c2b681601525973a8399" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int radiusSearch</definition>
        <argsstring>(size_t i, double sqSearchRadius, std::vector&lt; int &gt; &amp;indices)</argsstring>
        <name>radiusSearch</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sqSearchRadius</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>In case the point query is a point in data, call this method preferably. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="163"/>
      </memberdef>
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1a3003d533939ad22741546277568318e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void radiusSearch</definition>
        <argsstring>(const std::vector&lt; size_t &gt; &amp;queries, double sqSearchRadius, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;indices, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;sqDists)</argsstring>
        <name>radiusSearch</name>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sqSearchRadius</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
          <declname>sqDists</declname>
        </param>
        <briefdescription>
<para>In case the point query is a point in data, call this method preferably. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="167"/>
      </memberdef>
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1a03ea5ff39663817de20e309a476dbb64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void radiusSearch</definition>
        <argsstring>(const std::vector&lt; size_t &gt; &amp;queries, double sqSearchRadius, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;indices)</argsstring>
        <name>radiusSearch</name>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>queries</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sqSearchRadius</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>In case the point query is a point in data, call this method preferably. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="170"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1a644c6f968510be91ee0cda095863479b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void knnSearch</definition>
        <argsstring>(const double *query, size_t k, std::vector&lt; int &gt; &amp;indices, std::vector&lt; double &gt; &amp;sqDists)</argsstring>
        <name>knnSearch</name>
        <param>
          <type>const double *</type>
          <declname>query</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>sqDists</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="174"/>
      </memberdef>
      <memberdef kind="function" id="class_d_o_1_1_k_d_tree_1a5c1dcf9180cf66b5a4a64fff31ae7da7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int radiusSearch</definition>
        <argsstring>(const double *query, double sqSearchRadius, std::vector&lt; int &gt; &amp;indices, std::vector&lt; double &gt; &amp;sqDists)</argsstring>
        <name>radiusSearch</name>
        <param>
          <type>const double *</type>
          <declname>query</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sqSearchRadius</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>sqDists</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="177"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>VERY IMPORTANT TECHNICAL DETAIL: MatrixXd uses a *** COLUMN-MAJOR *** storage in the core library. The matrix must be transposed before. I say this because it seems common to stack data in a row major fashion.</para><para>Therefore, data points are column vectors in MatrixXd !! However FLANN uses a row major storage. So, please listen to Michael Jackson: <ref refid="namespace_d_o" kindref="compound">DO</ref> THINK TWICE ! (... She told my baby that we danced &apos;til three...) And have a look on the DOKDTree.cpp, which tests the <ref refid="class_d_o_1_1_k_d_tree" kindref="compound">KDTree</ref> data-structure </para>    </detaileddescription>
    <location file="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" line="47" bodyfile="C:/Users/David/Desktop/GitHub/DO-CV/src/DO/KDTree/KDTree.hpp" bodystart="46" bodyend="185"/>
    <listofallmembers>
      <member refid="class_d_o_1_1_k_d_tree_1af78543699de777a8de899494184873de" prot="private" virt="non-virtual"><scope>DO::KDTree</scope><name>data_</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1ab4bd4fc683b155c206ca5313419e8878" prot="private" virt="non-virtual"><scope>DO::KDTree</scope><name>index_</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1ad29928d9bf40130061a278a66588541d" prot="private" virt="non-virtual"><scope>DO::KDTree</scope><name>index_params_</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1a3675d821ba5bb5c9d03dc682618c369c" prot="public" virt="non-virtual"><scope>DO::KDTree</scope><name>KDTree</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1aff5b51190734bbf0ae15f58d370a8d55" prot="public" virt="non-virtual"><scope>DO::KDTree</scope><name>knnSearch</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1a11d7bdc9d8b1b123937f94a3ddef756b" prot="public" virt="non-virtual"><scope>DO::KDTree</scope><name>knnSearch</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1a81d8a8303a45942a63711f8947c767fc" prot="public" virt="non-virtual"><scope>DO::KDTree</scope><name>knnSearch</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1af7d24dfdd085578d8bbea18a11996f93" prot="public" virt="non-virtual"><scope>DO::KDTree</scope><name>knnSearch</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1abe7a4e079c6cb7eb7dca73aa4650fcd2" prot="public" virt="non-virtual"><scope>DO::KDTree</scope><name>knnSearch</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1ab14cc83d3a796260625345c1ca43bec5" prot="public" virt="non-virtual"><scope>DO::KDTree</scope><name>knnSearch</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1ab3823b04d9b4bf4aa015fef1b11eea07" prot="public" virt="non-virtual"><scope>DO::KDTree</scope><name>knnSearch</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1a2a06fc08629001cb675f7b40bd287fc5" prot="public" virt="non-virtual"><scope>DO::KDTree</scope><name>knnSearch</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1a644c6f968510be91ee0cda095863479b" prot="private" virt="non-virtual"><scope>DO::KDTree</scope><name>knnSearch</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1a4300321abdb8f70c0f6b258cff7b5110" prot="public" virt="non-virtual"><scope>DO::KDTree</scope><name>radiusSearch</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1a6e2663447313ea234eaceae90af3d452" prot="public" virt="non-virtual"><scope>DO::KDTree</scope><name>radiusSearch</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1a076742534911f9631d45df58f38c0553" prot="public" virt="non-virtual"><scope>DO::KDTree</scope><name>radiusSearch</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1a5c20e2748a9d220c471db28d487f6dc1" prot="public" virt="non-virtual"><scope>DO::KDTree</scope><name>radiusSearch</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1ac533d02ed935b4b95318f8a6290f1c2d" prot="public" virt="non-virtual"><scope>DO::KDTree</scope><name>radiusSearch</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1a63feb9493ad6c2b681601525973a8399" prot="public" virt="non-virtual"><scope>DO::KDTree</scope><name>radiusSearch</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1a3003d533939ad22741546277568318e4" prot="public" virt="non-virtual"><scope>DO::KDTree</scope><name>radiusSearch</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1a03ea5ff39663817de20e309a476dbb64" prot="public" virt="non-virtual"><scope>DO::KDTree</scope><name>radiusSearch</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1a5c1dcf9180cf66b5a4a64fff31ae7da7" prot="private" virt="non-virtual"><scope>DO::KDTree</scope><name>radiusSearch</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1a636980ad4022b7a4ad300e6f6bf10bb3" prot="private" virt="non-virtual"><scope>DO::KDTree</scope><name>search_params_</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1aaeccc90de828b8c4c64bb8784fffc57d" prot="private" virt="non-virtual"><scope>DO::KDTree</scope><name>wrapped_data_</name></member>
      <member refid="class_d_o_1_1_k_d_tree_1a9751ca30660b9a4003ff4e9b79e4e1b7" prot="public" virt="non-virtual"><scope>DO::KDTree</scope><name>~KDTree</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

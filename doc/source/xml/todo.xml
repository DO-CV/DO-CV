<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="todo" kind="page">
    <compoundname>todo</compoundname>
    <title>Todo List</title>
    <detaileddescription>
<para><variablelist>
<varlistentry><term><anchor id="todo_1_todo000006"/>Member <ref refid="class_d_o_1_1_adapt_feature_affinely_to_local_shape_1adb280b2d26559fc4fd143870777efcd0" kindref="member">AdaptFeatureAffinelyToLocalShape::AdaptFeatureAffinelyToLocalShape</ref>  ()</term></varlistentry>
<listitem><para>: redo because there are hard-coded parameters in the default constructor.  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000001"/>Member <ref refid="group___image_1ga3589d93d904fd25e83198258d03d44e6" kindref="member">DEFINE_IMAGE_VIEW_FROM_COLMAJOR_MULTIARRAY</ref>  (Colorspace)</term></varlistentry>
<listitem><para>Check this functionality...  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000008"/>Class <ref refid="struct_d_o_1_1_dialog_box_info" kindref="compound">DialogBoxInfo</ref>  </term></varlistentry>
<listitem><para>See if it can be done in a more elegant way.  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000007"/>Namespace <ref refid="namespace_d_o" kindref="compound">DO</ref>  </term></varlistentry>
<listitem><para>: Implement simple geometric kernels.  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000010"/>Member <ref refid="group___graphics_view_1gae24b6fc4e3898246eff487e6f227c4f9" kindref="member">DO::drawPoint</ref>  (ImageItem pixItem, int x, int y, const Rgb8 &amp;c)</term></varlistentry>
<listitem><para>Not yet implemented I think. Check that.  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000009"/>Group <ref refid="group___event" kindref="compound">Event</ref>  </term></varlistentry>
<listitem><para>Investigate if it is useful. I don&apos;t remember.</para><para></para></listitem>
<varlistentry><term><anchor id="todo_1_todo000011"/>Member <ref refid="class_d_o_1_1_image_pyramid_params_1a72c5d7407d0631cf6d2a9c103b39091e" kindref="member">ImagePyramidParams::initOctaveIndex</ref>  () const </term></varlistentry>
<listitem><para>. Improve explanation. <formula id="93">$(1/2)^i$</formula> is the rescaling factor of the downsampled image of octave <formula id="8">$i$</formula>.  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000002"/>Class <ref refid="class_d_o_1_1_multi_array" kindref="compound">MultiArray&lt; T, N, StorageOrder &gt;</ref>  </term></varlistentry>
<listitem><para>:<itemizedlist>
<listitem><para>prefer shallow copy in copy constructor and in the assignment operator</para></listitem><listitem><para>add &apos;MultiArray MultiArray::clone() const&apos; method. (Performance still seems acceptable even if deep copies are always done.)</para></listitem><listitem><para><bold>DOUBLE-CHECK</bold> all existing image-based algorithm.</para></listitem><listitem><para>Extract boost::shared_pointer with bcp to get the job done.  </para></listitem></itemizedlist>
</para></listitem>
<varlistentry><term><anchor id="todo_1_todo000003"/>Class <ref refid="class_d_o_1_1_tree" kindref="compound">Tree&lt; T &gt;</ref>  </term></varlistentry>
<listitem><para>: finish testing (cf. methods&apos; description where TODO is present.).  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000004"/>Member <ref refid="class_d_o_1_1_tree_1aba6ece339051b6bad21840d986bd0a3a" kindref="member">Tree&lt; T &gt;::cut_tree</ref>  (node_handle node)</term></varlistentry>
<listitem><para>: check if the implementation is correct.  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000005"/>Member <ref refid="class_d_o_1_1_tree_1a73a3166a18f4d9091d128d7ede38d740" kindref="member">Tree&lt; T &gt;::delete_subtree</ref>  (node_handle node)</term></varlistentry>
<listitem><para>: check if the implementation is correct. </para></listitem>
</variablelist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>

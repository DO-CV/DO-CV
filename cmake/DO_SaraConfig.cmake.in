# ============================================================================ #
# Include all the macros we need before we use Sara.
#
if (NOT DO_Sara_FOUND)
  # Add new path to CMake module path.
  list(APPEND CMAKE_MODULE_PATH
       @CMAKE_INSTALL_PREFIX@/share/DO_Sara/cmake)

  # Load Sara specific macros.
  include(sara_macros)

  # Specify Sara version.
  include(sara_version)

  # Configure compiler for the specific project.
  include (sara_configure_cxx_compiler)

  # Define one more macro.
  macro (sara_find_compiled_component_library COMPONENT)
    # This macro defines two variables:
    # - DO_Sara_${COMPONENT}_INCLUDE_DIR
    # - DO_Sara_${COMPONENT}_LIBRARIES

    find_path(DO_Sara_${COMPONENT}_INCLUDE_DIR
      NAMES ${COMPONENT}.hpp
      PATHS @CMAKE_INSTALL_PREFIX@
            "C:/Program Files/DO-Sara"
      PATH_SUFFIXES include/DO/Sara)

    if (DO_USE_STATIC_LIBS)
      set (_library_name "DO_Sara_${COMPONENT}-s")
      set (_library_name_debug "DO_Sara_${COMPONENT}-sd")
    else ()
      set (_library_name "DO_Sara_${COMPONENT}")
      set (_library_name_debug "DO_Sara_${COMPONENT}-d")
    endif ()

    find_library(DO_Sara_${COMPONENT}_DEBUG_LIBRARIES
      NAMES ${_library_name_debug}
      PATHS @CMAKE_INSTALL_PREFIX@
            "C:/Program Files/DO-Sara-Debug"
      PATH_SUFFIXES lib)

    find_library(DO_Sara_${COMPONENT}_RELEASE_LIBRARIES
      NAMES ${_library_name}
      PATHS @CMAKE_INSTALL_PREFIX@
            "C:/Program Files/DO-Sara"
      PATH_SUFFIXES lib)

    if (NOT DO_USE_STATIC_LIBS AND NOT DO_Sara_${COMPONENT}_DEBUG_LIBRARIES)
      set(DO_Sara_${COMPONENT}_LIBRARIES
        ${DO_Sara_${COMPONENT}_RELEASE_LIBRARIES}
        CACHE STRING "")
    else ()
      set(DO_Sara_${COMPONENT}_LIBRARIES
        debug ${DO_Sara_${COMPONENT}_DEBUG_LIBRARIES}
        optimized ${DO_Sara_${COMPONENT}_RELEASE_LIBRARIES}
        CACHE STRING "")
    endif ()

    if (DO_USE_STATIC_LIBS)
      if (NOT DO_Sara_${COMPONENT}_DEBUG_LIBRARIES OR
          NOT DO_Sara_${COMPONENT}_RELEASE_LIBRARIES)
        message(FATAL_ERROR "DO_Sara_${COMPONENT} is missing!")
      endif ()
    elseif (NOT DO_Sara_${COMPONENT}_RELEASE_LIBRARIES)
      message(FATAL_ERROR "DO_Sara_${COMPONENT} is missing!")
    endif ()
  endmacro ()
endif ()



# ============================================================================ #
# Some more preliminary steps.
#
if (NOT DO_Sara_FOUND)
  # List all the available components in Sara.
  sara_populate_available_components()

  # Automatically link Qt executables to qtmain target on Windows.
  if (POLICY CMP0020)
    cmake_policy(SET CMP0020 NEW)
  endif()

  # Find the include directories.
  find_path(DO_Sara_INCLUDE_DIRS
    NAMES DO/Sara/Core.hpp
          DO/Sara/Defines.hpp
          DO/Sara/Graphics.hpp
    PATHS @CMAKE_INSTALL_PREFIX@
          "C:/Program Files/DO-Sara"
    PATH_SUFFIXES include)

  # Now we can mark DO_Sara as found.
  set(DO_Sara_FOUND TRUE)
endif ()


# ============================================================================ #
# 'find_package(DO_Sara COMPONENTS Core Graphics... [REQUIRED|QUIET])'
#
# Debug message.
sara_step_message("DO_SaraConfig.cmake running for project '${PROJECT_NAME}'")

# List the compile flags needed by Sara.
set(SARA_DEFINITIONS "-DSRCDIR=${CMAKE_CURRENT_SOURCE_DIR}")

if (NOT DO_Sara_FIND_COMPONENTS)
  set(DO_Sara_USE_COMPONENTS ${DO_Sara_COMPONENTS})
else ()
  sara_check_requested_components()
endif ()

# Retrieve the set of dependencies when linking projects with Sara.
set(DO_Sara_LIBRARIES "")

foreach (COMPONENT ${DO_Sara_USE_COMPONENTS})
  # Reuse existing component-specific CMake script.
  include(UseDOSara${COMPONENT})

  # TODO: when there is more than one header-only library:
  # 1. create a specific list of compiled libraries
  # 2. check if the library is in the list of compiled compiled library.
  sara_find_compiled_component_library(${COMPONENT})

  # Update the list of compiled component libraries we want to use.
  if (DO_Sara_${COMPONENT}_LIBRARIES)
    list(APPEND DO_Sara_LIBRARIES ${DO_Sara_${COMPONENT}_LIBRARIES})
  endif ()

  if ("${COMPONENT}" STREQUAL "Graphics")
    list(APPEND DO_Sara_LIBRARIES Qt5::OpenGL Qt5::Widgets ${OPENGL_LIBRARIES})
  endif ()

  if ("${COMPONENT}" STREQUAL "ImageIO")
    # EXIF library.
    find_package(EasyEXIF REQUIRED)

    # JPEG, PNG, TIFF image I/O.
    find_package(ThirdPartyImageIO REQUIRED)

    # Add these to the dependencies.
    list(APPEND DO_Sara_LIBRARIES
      ${EasyEXIF_LIBRARIES}
      ${ThirdPartyImageIO_LIBRARIES})
  endif ()
endforeach()

# Debug message.
sara_step_message("DO_Sara_LIBRARIES = ${DO_Sara_LIBRARIES}")

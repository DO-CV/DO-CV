image: nvidia/cudagl:10.1-runtime-ubuntu18.04

cache:
  paths:
    - .apt/
    - ccache/
    - /usr/local/include
    - /usr/local/lib

before_script:
  # Configure APT caching
  - echo $CI_PROJECT_DIR
  - export APT_DIR=$CI_PROJECT_DIR/.apt
  - export APT_STATE_LISTS=$APT_DIR/lists
  - export APT_CACHE_ARCHIVES=$APT_DIR/archives

  - printf "dir::state::lists    ${APT_STATE_LISTS};\ndir::cache::archives    ${APT_CACHE_ARCHIVES};\n" > /etc/apt/apt.conf
  - mkdir -p "${APT_STATE_LISTS}/partial" && mkdir -p "${APT_CACHE_ARCHIVES}/partial"

  # For the documentation.
  - apt-get update -y -qq
  - apt-get install -y -qq
      doxygen
      graphviz

  # All the packages to compile the C++ codebase.
  - apt-get install -y -qq
      build-essential
      ccache
      cmake
      cppcheck
      git
      libboost-all-dev
      libhdf5-dev
      libjpeg-dev
      libpng-dev
      libtiff5-dev
      libavcodec-dev
      libavformat-dev
      libavutil-dev
      libglew-dev
      libglfw3-dev
      ocl-icd-opencl-dev
      opencl-headers
      libpocl-dev
      libceres-dev
      qtbase5-dev

  # Python dependencies (TODO).
  - apt-get install -y -qq
      libboost-python-dev
      python3-dev

  # Setup for GUI testing.
  - apt-get install -y xvfb
  - Xvfb :1 -noreset 1>/dev/null 2>&1 &
  - export DISPLAY=:1

  # Setup ccache to speed up builds.
  - mkdir -p ccache
  - export CCACHE_BASEDIR=${PWD}
  - export CCACHE_DIR=${PWD}/ccache

  # Build CLBlast.
  - test -f /usr/local/include/clblast.h && echo "CLBlast is installed" || ./scripts/install_clblast.sh

cppcheck:
  stage: build
  script:
    - cppcheck --enable=all --inconclusive --verbose cpp/src

build:
  stage: build
  script:
    # Build Sara.
    - mkdir build
    - cd build
    - cmake ..
        -DCMAKE_BUILD_TYPE:STRING=Debug
        -DSARA_BUILD_SHARED_LIBS:BOOL=ON
        -DSARA_BUILD_SAMPLES:BOOL=ON
        -DSARA_BUILD_TESTS:BOOL=ON
    - make -j$(nproc)
    # Create deb package.
    - make package
  artifacts:
    paths:
    - build

test:
  stage: test
  script:
    - cd build
    - DISPLAY=:1 ctest
        -j$(nproc)
        --verbose
        --output-on-failure
        --exclude-regex "test_graphics_*|test_core_ipc_cond1"
    - make -j$(nproc) coverage
  dependencies:
    - build

pages:
  script:
    - cd build
    - make -j$(nproc) doc
    # Move the generated documentation in the right place.
    - mv doc/html/ ../public/
  dependencies:
    - build
  artifacts:
    paths:
    - public
